{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";var defaultCartState={items:[],totalAmount:0,totalQuantity:0,overAllAmount:0};var cartSlice=createSlice({name:\"cart\",initialState:{items:[],totalQuantity:0,totalAmount:0,overAllAmount:0},reducers:{addItemToCart:function addItemToCart(state,action){var newItem=action.payload;var existingItem=state.items.find(function(item){return item.id===newItem.id;});state.totalQuantity++;if(!existingItem){state.items.push({id:newItem.id,price:newItem.price,quantity:1,totalPrice:newItem.price,name:newItem.name,preview:newItem.preview});}else{existingItem.quantity=existingItem.quantity+1;existingItem.totalPrice=existingItem.totalPrice+newItem.price;}},clearCartData:function clearCartData(state,action){return defaultCartState;}}});export var cartActions=cartSlice.actions;export default cartSlice;","map":{"version":3,"sources":["D:/React/React_final/src/store/cart-slice.js"],"names":["createSlice","defaultCartState","items","totalAmount","totalQuantity","overAllAmount","cartSlice","name","initialState","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","preview","clearCartData","cartActions","actions"],"mappings":"AAAA,OAASA,WAAT,KAA4B,kBAA5B,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,CACvBC,KAAK,CAAE,EADgB,CAEvBC,WAAW,CAAE,CAFU,CAGvBC,aAAa,CAAE,CAHQ,CAIvBC,aAAa,CAAE,CAJQ,CAAzB,CAMA,GAAMC,CAAAA,SAAS,CAAGN,WAAW,CAAC,CAC5BO,IAAI,CAAE,MADsB,CAE5BC,YAAY,CAAE,CACZN,KAAK,CAAE,EADK,CAEZE,aAAa,CAAE,CAFH,CAGZD,WAAW,CAAE,CAHD,CAIZE,aAAa,CAAE,CAJH,CAFc,CAQ5BI,QAAQ,CAAE,CACRC,aADQ,wBACMC,KADN,CACaC,MADb,CACqB,CAC3B,GAAMC,CAAAA,OAAO,CAAGD,MAAM,CAACE,OAAvB,CACA,GAAMC,CAAAA,YAAY,CAAGJ,KAAK,CAACT,KAAN,CAAYc,IAAZ,CAAiB,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,EAAL,GAAYL,OAAO,CAACK,EAA9B,EAAjB,CAArB,CACAP,KAAK,CAACP,aAAN,GACA,GAAI,CAACW,YAAL,CAAmB,CACjBJ,KAAK,CAACT,KAAN,CAAYiB,IAAZ,CAAiB,CACfD,EAAE,CAAEL,OAAO,CAACK,EADG,CAEfE,KAAK,CAAEP,OAAO,CAACO,KAFA,CAGfC,QAAQ,CAAE,CAHK,CAIfC,UAAU,CAAET,OAAO,CAACO,KAJL,CAKfb,IAAI,CAAEM,OAAO,CAACN,IALC,CAMfgB,OAAO,CAAEV,OAAO,CAACU,OANF,CAAjB,EAQD,CATD,IASO,CACLR,YAAY,CAACM,QAAb,CAAwBN,YAAY,CAACM,QAAb,CAAwB,CAAhD,CACAN,YAAY,CAACO,UAAb,CAA0BP,YAAY,CAACO,UAAb,CAA0BT,OAAO,CAACO,KAA5D,CACD,CACF,CAlBO,CAmBRI,aAnBQ,wBAmBMb,KAnBN,CAmBaC,MAnBb,CAmBqB,CAC3B,MAAOX,CAAAA,gBAAP,CACD,CArBO,CARkB,CAAD,CAA7B,CAiCA,MAAO,IAAMwB,CAAAA,WAAW,CAAGnB,SAAS,CAACoB,OAA9B,CACP,cAAepB,CAAAA,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n  totalQuantity: 0,\r\n  overAllAmount: 0,\r\n};\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0,\r\n    totalAmount: 0,\r\n    overAllAmount: 0,\r\n  },\r\n  reducers: {\r\n    addItemToCart(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.totalQuantity++;\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n          name: newItem.name,\r\n          preview: newItem.preview,\r\n        });\r\n      } else {\r\n        existingItem.quantity = existingItem.quantity + 1;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      }\r\n    },\r\n    clearCartData(state, action) {\r\n      return defaultCartState;\r\n    },\r\n  },\r\n});\r\n\r\nexport const cartActions = cartSlice.actions;\r\nexport default cartSlice;\r\n"]},"metadata":{},"sourceType":"module"}